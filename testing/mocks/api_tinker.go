// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/blobstore/api/tinker (interfaces: ITinker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tinker "github.com/cubefs/blobstore/api/tinker"
	proto "github.com/cubefs/blobstore/common/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockITinker is a mock of ITinker interface.
type MockITinker struct {
	ctrl     *gomock.Controller
	recorder *MockITinkerMockRecorder
}

// MockITinkerMockRecorder is the mock recorder for MockITinker.
type MockITinkerMockRecorder struct {
	mock *MockITinker
}

// NewMockITinker creates a new mock instance.
func NewMockITinker(ctrl *gomock.Controller) *MockITinker {
	mock := &MockITinker{ctrl: ctrl}
	mock.recorder = &MockITinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITinker) EXPECT() *MockITinkerMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockITinker) Stats(arg0 context.Context, arg1 string) (tinker.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(tinker.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockITinkerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockITinker)(nil).Stats), arg0, arg1)
}

// UpdateVolume mocks base method.
func (m *MockITinker) UpdateVolume(arg0 context.Context, arg1 string, arg2 proto.Vid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockITinkerMockRecorder) UpdateVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockITinker)(nil).UpdateVolume), arg0, arg1, arg2)
}
